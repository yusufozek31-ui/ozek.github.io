<!doctype html>
<html lang="tr">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Basit Oyun — Yıldız Yakala</title>
  <style>
    /* Basit stil, mobil ve masaüstünde çalışır */
    :root{font-family: system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial;}
    body{display:flex;align-items:center;justify-content:center;height:100vh;margin:0;background:linear-gradient(180deg,#0f172a,#071229);color:#fff}
    .game-wrap{width:480px;height:640px;background:#041022;border-radius:12px;box-shadow:0 10px 30px rgba(0,0,0,.6);position:relative;overflow:hidden}
    canvas{display:block;background:linear-gradient(180deg,#05213c,#021224);}
    .ui{position:absolute;left:12px;top:12px;font-weight:600}
    .ui .score{font-size:18px}
    .ui .info{font-size:12px;opacity:.8;margin-top:6px}
    .overlay{position:absolute;inset:0;display:flex;align-items:center;justify-content:center;flex-direction:column;gap:12px}
    .btn{background:#0ea5a4;padding:10px 18px;border-radius:10px;color:#012;cursor:pointer;font-weight:700;border:none}
    .btn.secondary{background:transparent;border:2px solid rgba(255,255,255,.08);color:#fff}
    .small{font-size:13px;opacity:.9}
  </style>
</head>
<body>
  <div class="game-wrap">
    <canvas id="game" width="480" height="640" ></canvas>
    <div class="ui">
      <div class="score">Puan: <span id="score">0</span></div>
      <div class="info small">Klavye: ← → veya A D — Dokunmatik için ekranda sola/sağa dokun.</div>
    </div>
    <div id="overlay" class="overlay">
      <h1 style="letter-spacing:1px;margin:0">Yıldız Yakala</h1>
      <div class="small">Düşen yıldızları yakala — 10 kaçırma hakkın var</div>
      <button id="startBtn" class="btn">Oyunu Başlat</button>
      <button id="helpBtn" class="btn secondary">Nasıl Oynanır?</button>
    </div>
  </div>

  <script>
    // Basit oyun: sağ-sol hareket ile düşen yıldızları yakala.
    const canvas = document.getElementById('game');
    const ctx = canvas.getContext('2d');
    const W = canvas.width, H = canvas.height;

    let score = 0;
    let missed = 0;
    let running = false;

    // Player (çubuğumuz)
    const player = {
      w: 80,
      h: 14,
      x: W/2 - 40,
      y: H - 40,
      speed: 6,
      vx: 0
    };

    // Düşen yıldızlar dizisi
    const stars = [];

    function resetGame(){
      score = 0; missed = 0; stars.length = 0;
      player.x = W/2 - player.w/2;
    }

    function spawnStar(){
      const size = 12 + Math.random()*16;
      stars.push({
        x: Math.random()*(W - size),
        y: -size,
        vy: 1.6 + Math.random()*2.2,
        size
      });
    }

    let spawnTimer = 0;
    function update(dt){
      // oyuncu hareket
      player.x += player.vx * player.speed;
      if(player.x < 0) player.x = 0;
      if(player.x + player.w > W) player.x = W - player.w;

      // yıldız oluşturma hızı oyunda arttırılabilir
      spawnTimer += dt;
      if(spawnTimer > 650){ // ms
        spawnTimer = 0;
        spawnStar();
      }

      // yıldızları güncelle
      for(let i = stars.length-1; i >= 0; i--){
        const s = stars[i];
        s.y += s.vy;

        // collision (basit AABB ile)
        if(s.y + s.size >= player.y && s.y <= player.y + player.h && s.x + s.size >= player.x && s.x <= player.x + player.w){
          score += Math.round(s.size);
          stars.splice(i,1);
          continue;
        }

        // eğer ekranın altına giderse kaçırıldı
        if(s.y > H){
          stars.splice(i,1);
          missed++;
          if(missed >= 10){
            endGame();
            return;
          }
        }
      }
    }

    function draw(){
      // temizle
      ctx.clearRect(0,0,W,H);

      // arkaplan yıldız benzeri nokta
      for(let i=0;i<40;i++){
        ctx.fillStyle = 'rgba(255,255,255,0.03)';
        ctx.fillRect((i*53)%W, (i*37)%H, 2,2);
      }

      // player
      ctx.fillStyle = '#06b6d4';
      roundRect(ctx, player.x, player.y, player.w, player.h, 6);

      // yıldızlar
      for(const s of stars){
        drawStar(ctx, s.x + s.size/2, s.y + s.size/2, Math.max(3, Math.floor(s.size/4)), s.size/2);
      }

      // üst bilgi
      document.getElementById('score').textContent = score;
    }

    // yardımcı çizim fonksiyonları
    function drawStar(ctx, cx, cy, spikes, outerRadius){
      const innerRadius = outerRadius/2.7;
      let rot = Math.PI/2 * 3;
      let x = cx; let y = cy;
      let step = Math.PI / spikes;
      ctx.beginPath();
      ctx.moveTo(cx, cy - outerRadius);
      for(let i=0;i<spikes;i++){
        x = cx + Math.cos(rot) * outerRadius;
        y = cy + Math.sin(rot) * outerRadius;
        ctx.lineTo(x,y);
        rot += step;

        x = cx + Math.cos(rot) * innerRadius;
        y = cy + Math.sin(rot) * innerRadius;
        ctx.lineTo(x,y);
        rot += step;
      }
      ctx.lineTo(cx, cy - outerRadius);
      ctx.closePath();
      ctx.fillStyle = 'rgba(255,215,90,0.95)';
      ctx.fill();
      ctx.strokeStyle = 'rgba(255,200,80,0.25)';
      ctx.stroke();
    }

    function roundRect(ctx, x, y, width, height, radius){
      ctx.beginPath();
      ctx.moveTo(x+radius,y);
      ctx.arcTo(x+width,y,x+width,y+height,radius);
      ctx.arcTo(x+width,y+height,x,y+height,radius);
      ctx.arcTo(x,y+height,x,y,radius);
      ctx.arcTo(x,y,x+width,y,radius);
      ctx.closePath();
      ctx.fill();
    }

    // Oyun döngüsü (raf ile)
    let last = 0;
    function loop(timestamp){
      if(!running) return;
      if(!last) last = timestamp;
      const dt = timestamp - last;
      last = timestamp;
      update(dt);
      draw();
      requestAnimationFrame(loop);
    }

    function startGame(){
      resetGame();
      running = true;
      document.getElementById('overlay').style.display = 'none';
      last = 0;
      requestAnimationFrame(loop);
    }

    function endGame(){
      running = false;
      const overlay = document.getElementById('overlay');
      overlay.style.display = 'flex';
      overlay.innerHTML = `\n        <div style="text-align:center">\n          <h2 style="margin:0">Oyun Bitti</h2>\n          <div class="small">Puanın: <strong>${score}</strong></div>\n          <div class="small">Kaçırılan: <strong>${missed}</strong></div>\n          <button id=\"startBtn\" class=\"btn\">Tekrar Oyna</button>\n        </div>\n      `;
      document.getElementById('startBtn').onclick = () => startGame();
    }

    // giriş kontrolleri
    window.addEventListener('keydown', e => {
      if(e.key === 'ArrowLeft' || e.key.toLowerCase() === 'a') player.vx = -1;
      if(e.key === 'ArrowRight' || e.key.toLowerCase() === 'd') player.vx = 1;
    });
    window.addEventListener('keyup', e => {
      if(['ArrowLeft','ArrowRight','a','d'].includes(e.key)) player.vx = 0;
    });

    // Dokunmatik (basit sola/sağa dokunma bölgesi)
    canvas.addEventListener('touchstart', handleTouch);
    canvas.addEventListener('touchmove', handleTouch);
    function handleTouch(e){
      const t = e.touches[0];
      const rect = canvas.getBoundingClientRect();
      const x = t.clientX - rect.left;
      // ekranın sol yarısına dokunursa sola, sağ yarısına dokunursa sağa
      player.x = x - player.w/2;
      e.preventDefault();
    }

    // overlay butonları
    document.getElementById('startBtn').onclick = () => startGame();
    document.getElementById('helpBtn').onclick = () => {
      alert('Amaç: Düşen yıldızları yakala. Her kaçırdığında 1 hakkın gider. 10 kaçırınca oyun biter. Klavye: ← → veya A D. Dokunmatik cihazda ekranda dokunarak çubuğu hareket ettir.');
    }

    // başlangıçta bir kaç yıldız gösterimi için
    for(let i=0;i<4;i++) spawnStar();

  </script>
</body>
</html>